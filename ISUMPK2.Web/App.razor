@namespace ISUMPK2.Web
@inherits ComponentBase
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <ErrorBoundary>
                <ChildContent>
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <NotAuthorized>
                            @if (context.User.Identity?.IsAuthenticated != true)
                            {
                                <RedirectToLogin />
                            }
                            else
                            {
                                <MudContainer MaxWidth="MaxWidth.Small" Class="mt-6 pa-4">
                                    <MudAlert Severity="Severity.Error">У вас нет доступа к этой странице.</MudAlert>
                                    <MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/"))">
                                        Вернуться на главную
                                    </MudButton>
                                </MudContainer>
                            }
                        </NotAuthorized>
                        <Authorizing>
                            <MudContainer MaxWidth="MaxWidth.Small" Class="mt-6 pa-4 d-flex justify-center">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                            </MudContainer>
                        </Authorizing>
                    </AuthorizeRouteView>
                </ChildContent>
                <ErrorContent>
                    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-6 pa-4">
                        <MudAlert Severity="Severity.Error">Произошла ошибка при обработке запроса</MudAlert>
                        <MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/"))">
                            Вернуться на главную
                        </MudButton>
                    </MudContainer>
                </ErrorContent>
            </ErrorBoundary>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <MudContainer MaxWidth="MaxWidth.Small" Class="mt-6 pa-4">
                    <MudAlert Severity="Severity.Warning">Страница не найдена</MudAlert>
                    <MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/"))">
                        Вернуться на главную
                    </MudButton>
                </MudContainer>
            </LayoutView>
        </NotFound>
    </Router>
    <WorkerRoleRedirector />
    <TokenMonitor /> <!-- Добавлен монитор токена -->
</CascadingAuthenticationState>

@code {
    [Inject] NavigationManager NavigationManager { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Проверяем, есть ли сохраненная тема
                var themeName = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");
                var themeColor = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "themeColor") ?? "primary";
                
                bool isDark;
                
                if (string.IsNullOrEmpty(themeName))
                {
                    // Если тема не задана, используем системную тему
                    try 
                    {
                        isDark = await JSRuntime.InvokeAsync<bool>("getSystemTheme");
                    }
                    catch
                    {
                        // Если функция не определена, используем светлую тему по умолчанию
                        isDark = false;
                    }
                }
                else
                {
                    isDark = themeName == "Dark";
                }
                
                // Применяем тему
                try 
                {
                    await JSRuntime.InvokeVoidAsync("applyTheme", isDark, themeColor);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ошибка при применении темы: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при инициализации темы: {ex.Message}");
            }
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }
    
    public class RedirectToLogin : ComponentBase
    {
        [Inject]
        private NavigationManager NavigationManager { get; set; }

        protected override void OnInitialized()
        {
            var returnUrl = NavigationManager.Uri;
            NavigationManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(returnUrl)}", true);
        }
    }
}