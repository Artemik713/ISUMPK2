@page "/products"
@attribute [Authorize]
@using ISUMPK2.Application.DTOs
@using ISUMPK2.Application.Services
@using ISUMPK2.Web.Models
@using MudBlazor
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Каталог продукции - ИСУ ПМК</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="0" Class="d-flex justify-space-between align-center flex-wrap pa-4 gap-4">
        <div>
            <MudText Typo="Typo.h4">Каталог продукции</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">Изделия и продукты, выпускаемые предприятием</MudText>
        </div>
        <div class="d-flex gap-2">
            @if (canManageProducts)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@(() => NavigationManager.NavigateTo("/products/add"))">
                    Добавить продукцию
                </MudButton>
            }
            <MudTooltip Text="Обновить">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" OnClick="LoadProductsAsync" />
            </MudTooltip>
        </div>
    </MudPaper>
    
    <!-- Фильтры -->
    <MudPaper Elevation="0" Class="py-3 px-4 my-3">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudAutocomplete T="string" Label="Тип продукции" @bind-Value="selectedCategory" 
                                 SearchFunc="@SearchCategories" ResetValueOnEmptyText="true" 
                                 CoerceText="true" AdornmentIcon="@Icons.Material.Filled.Category"
                                 AdornmentColor="Color.Primary" Immediate="true"
                                 Dense="true" OnClearButtonClick="@(() => FilterChanged())"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudTextField @bind-Value="searchText" Label="Поиск" Adornment="Adornment.End" 
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                             OnAdornmentClick="FilterChanged" OnKeyDown="HandleKeyDown" 
                             Immediate="true" Dense="true" />
            </MudItem>
            <MudItem xs="12" sm="12" md="4" lg="6" Class="d-flex justify-end align-center">
                <MudChip Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                        Class="ml-auto" Style="min-width: auto;" T="string">
                    Найдено @filteredProducts.Count позиций
                </MudChip>
                <MudIconButton Icon="@(isGridView ? Icons.Material.Filled.ViewList : Icons.Material.Filled.ViewModule)" 
                              OnClick="ToggleView" Color="Color.Primary" Size="Size.Small" Class="ml-2" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (isLoading)
    {
        <div class="d-flex justify-center my-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else if (filteredProducts.Count == 0)
    {
        <MudPaper Class="d-flex flex-column align-center pa-8 rounded-lg" Elevation="0">
            <MudIcon Icon="@Icons.Material.Outlined.Category" Color="Color.Secondary" Size="Size.Large" Class="mb-4" />
            <MudText Typo="Typo.h6" Align="Align.Center">Продукция не найдена</MudText>
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mud-text-secondary mt-1">
                Попробуйте изменить параметры поиска или добавьте новую продукцию
            </MudText>
            @if (canManageProducts)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/products/add"))" Class="mt-4">
                    Добавить продукцию
                </MudButton>
            }
        </MudPaper>
    }
    else
    {
        @if (isGridView)
        {
            <MudGrid>
                @foreach (var product in filteredProducts)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Elevation="2" Class="h-100 product-card" @onclick="() => ViewProductDetails(product.Id)">
                            <MudCardMedia Image="@GetProductImage(product)" Style="height: 200px; background-size: contain;" />
                            <MudCardContent>
                                <div class="d-flex justify-space-between align-start">
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Class="mud-primary-text"><strong>@product.Code</strong></MudText>
                                        <MudText Typo="Typo.body1" Class="mt-1 product-title">@product.Name</MudText>
                                    </div>
                                    <MudChip Color="Color.Secondary" Size="Size.Small" Label="true" T="string">@product.UnitOfMeasure</MudChip>
                                </div>
                                <MudText Typo="Typo.caption" Class="mt-2 mud-text-secondary truncate-description">@product.Description</MudText>
                                <div class="d-flex justify-space-between align-center mt-2">
                                    <MudText Typo="Typo.body2"><strong>Запас:</strong> @product.CurrentStock</MudText>
                                    <MudChip T="string" Color="@GetStockColor(product)" Size="Size.Small">
                                        @(product.CurrentStock > 0 ? "В наличии" : "Отсутствует")
                                    </MudChip>
                                </div>
                                <div class="d-flex justify-space-between align-center mt-2">
                                    <MudText Typo="Typo.caption">
                                        <strong>Категория:</strong> @product.ProductTypeName
                                    </MudText>
                                    <MudText Typo="Typo.body1" Style="font-weight: 500;">
                                        @product.Price.ToString("C0")
                                    </MudText>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudPaper>
                <MudTable Items="@filteredProducts" Hover="true" Bordered="false" Striped="true" Elevation="0">
                    <HeaderContent>
                        <MudTh>Фото</MudTh>
                        <MudTh>Код</MudTh>
                        <MudTh>Наименование</MudTh>
                        <MudTh>Категория</MudTh>
                        <MudTh>Запас</MudTh>
                        <MudTh>Ед. изм.</MudTh>
                        <MudTh>Цена</MudTh>
                        <MudTh>Действия</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudAvatar Square="true" Size="Size.Medium" Image="@GetProductImage(context)" Style="min-width: 60px; height: 60px;" />
                        </MudTd>
                        <MudTd>@context.Code</MudTd>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@context.ProductTypeName</MudTd>
                        <MudTd>
                            <div class="d-flex align-center">
                                <span>@context.CurrentStock</span>
                                <MudChip T="string" Color="@GetStockColor(context)" Size="Size.Small" Class="ml-2">
                                    @(context.CurrentStock > 0 ? "В наличии" : "Отсутствует")
                                </MudChip>
                            </div>
                        </MudTd>
                        <MudTd>@context.UnitOfMeasure</MudTd>
                        <MudTd>@context.Price.ToString("C0")</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" OnClick="() => ViewProductDetails(context.Id)" />
                            @if (canManageProducts)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => EditProduct(context.Id)" />
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
    }
</MudContainer>

<style>
    .product-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: pointer;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--mud-elevation-5);
    }

    .product-title {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 3em;
    }

    .truncate-description {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

@code {
    private bool isLoading = true;
    private bool canManageProducts = true; 
    private bool isGridView = true;
    private string searchText = "";
    private string selectedCategory = "";
    private List<ProductModel> products = new();
    private List<ProductModel> filteredProducts = new();
    private List<string> categories = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        isLoading = true;

        try
        {
            // Загрузка продукции и категорий
            var productsDto = await ProductService.GetAllProductsAsync();
            products = productsDto.Select(p => new ProductModel
            {
                Id = p.Id,
                Code = p.Code,
                Name = p.Name,
                Description = p.Description ?? "",
                ProductTypeId = p.ProductTypeId,
                ProductTypeName = p.ProductTypeName ?? "Без категории",
                Price = p.Price,
                CurrentStock = p.CurrentStock,
                UnitOfMeasure = p.UnitOfMeasure ?? "шт.",
                // Исправлено: используем свойство, которое действительно существует в ProductDto
                ImageUrl = p.ImageUrl // Используем ImageUrl вместо ImagePath
            }).ToList();

            // Получаем уникальные категории для фильтра
            categories = products.Select(p => p.ProductTypeName).Distinct().OrderBy(c => c).ToList();

            // Применяем фильтры
            FilterProducts();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке продукции: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterProducts()
    {
        filteredProducts = products;

        // Фильтр по категории
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filteredProducts = filteredProducts.Where(p => p.ProductTypeName == selectedCategory).ToList();
        }

        // Фильтр по поисковому запросу
        if (!string.IsNullOrEmpty(searchText))
        {
            var search = searchText.ToLower();
            filteredProducts = filteredProducts.Where(p => 
                p.Name.ToLower().Contains(search) || 
                p.Code.ToLower().Contains(search) || 
                p.Description.ToLower().Contains(search)
            ).ToList();
        }
    }

    private void FilterChanged()
    {
        FilterProducts();
    }

    private async Task<IEnumerable<string>> SearchCategories(string value, CancellationToken cancellationToken)
    {
        // Если строка пуста, возвращаем все категории
        await Task.Delay(1, cancellationToken); // Добавляем для асинхронной сигнатуры

        if (string.IsNullOrEmpty(value))
            return categories;

        return categories.Where(c => c.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private void HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            FilterChanged();
    }

    private void ViewProductDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/products/{id}");
    }

    private void EditProduct(Guid id)
    {
        NavigationManager.NavigateTo($"/products/edit/{id}");
    }

    private void ToggleView()
    {
        isGridView = !isGridView;
    }

    private Color GetStockColor(ProductModel product)
    {
        if (product.CurrentStock <= 0)
            return Color.Error;
        if (product.CurrentStock <= 10)
            return Color.Warning;
        return Color.Success;
    }

    private string GetProductImage(ProductModel product)
    {
        if (!string.IsNullOrEmpty(product.ImageUrl))
            return product.ImageUrl;
        
        // Заглушка по умолчанию в зависимости от категории
        switch (product.ProductTypeName?.ToLower())
        {
            case "металлические конструкции":
                return "/images/products/metal-structure-default.jpg";
            case "детали для станков":
                return "/images/products/machine-parts-default.jpg";
            case "покрасочные изделия":
                return "/images/products/painted-products-default.jpg";
            default:
                return "/images/products/default-product.jpg";
        }
    }
}