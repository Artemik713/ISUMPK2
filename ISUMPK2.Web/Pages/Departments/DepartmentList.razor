@page "/departments"
@using ISUMPK2.Application.DTOs
@using ISUMPK2.Application.Services
@using ISUMPK2.Domain.Entities
@using ISUMPK2.Web.Dialogs
@using MudBlazor
@inject IDepartmentService DepartmentService
@inject IUserService UserService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Отделы - УралТехПром</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Управление отделами</MudText>

        <MudButton Class="mb-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenCreateDialog">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-2" /> Добавить отдел
        </MudButton>

        @if (loading)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else if (departments == null || !departments.Any())
        {
            <MudAlert Severity="Severity.Info">Нет доступных отделов</MudAlert>
        }
        else
        {
            <MudTable Items="@departments" Hover="true" Striped="true" Elevation="2">
                <HeaderContent>
                    <MudTh>Название</MudTh>
                    <MudTh>Описание</MudTh>
                    <MudTh>Руководитель</MudTh>
                    <MudTh>Действия</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Название">
                        <MudLink Href="@($"/departments/{context.Id}")">@context.Name</MudLink>
                    </MudTd>
                    <MudTd DataLabel="Описание">@context.Description</MudTd>
                    <MudTd DataLabel="Руководитель">
                        @if (!string.IsNullOrEmpty(context.HeadName) && context.HeadName != "Не назначен")
                        {
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="mr-2" />
                                <span>@context.HeadName</span>
                            </div>
                        }
                        else
                        {
                            <MudText Color="Color.Secondary">Не назначен</MudText>
                        }
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                                       OnClick="@(() => OpenEditDialog(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error"
                                       OnClick="@(() => OpenDeleteDialog(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>
</MudContainer>

@code {
    private bool loading = true;
    private IEnumerable<DepartmentDto> departments;
    private IEnumerable<UserDto> users;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            departments = await DepartmentService.GetAllDepartmentsAsync();
            users = await UserService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке данных: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters
        {
            { "Users", users }
        };

        var dialog = await DialogService.ShowAsync<DepartmentCreateDialog>("Создать отдел", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Отдел успешно создан", Severity.Success);
        }
    }

    private async Task OpenEditDialog(DepartmentDto department)
    {
        var parameters = new DialogParameters
        {
            { "Department", department },
            { "Users", users }
        };

        var dialog = await DialogService.ShowAsync<DepartmentEditDialog>("Редактировать отдел", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Отдел успешно обновлен", Severity.Success);
        }
    }

    private async Task OpenDeleteDialog(DepartmentDto department)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Подтверждение удаления",
            $"Вы уверены, что хотите удалить отдел '{department.Name}'?",
            "Да", "Отмена");

        if (confirmed == true)
        {
            try
            {
                await DepartmentService.DeleteDepartmentAsync(department.Id);
                await LoadData();
                Snackbar.Add("Отдел успешно удален", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ошибка при удалении отдела: {ex.Message}", Severity.Error);
            }
        }
    }
}