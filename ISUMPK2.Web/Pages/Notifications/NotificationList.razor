@page "/notifications"
@attribute [Authorize]
@using ISUMPK2.Web.Dialogs
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using ISUMPK2.Application.Services
@using ISUMPK2.Web.Models
@using ISUMPK2.Web.Services
@using ISUMPK2.Web.Extensions
@using Microsoft.AspNetCore.Authorization
@inject INotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService

<PageTitle>Уведомления - ИСУ ПМК</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h4">Уведомления</MudText>

        <div class="d-flex">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.DoneAll"
                       OnClick="@MarkAllAsReadAsync" Disabled="@(!notifications.Any(n => !n.IsRead))">Отметить все как прочитанные</MudButton>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else if (errorMessage != null)
    {
        <MudAlert Severity="Severity.Error" Class="my-4">@errorMessage</MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TryReloadAsync">Повторить</MudButton>
    }
    else if (!notifications.Any())
    {
        <MudAlert Severity="Severity.Info" Class="my-4">У вас нет уведомлений</MudAlert>
    }
    else
    {
        <MudList T="NotificationModel" Clickable="true">
            @foreach (var notification in notifications)
            {
                <MudListItem OnClick="@(() => HandleNotificationClick(notification))">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@(notification.IsRead ? Icons.Material.Outlined.Notifications : Icons.Material.Filled.Notifications)"
                                 Color="@(notification.IsRead ? Color.Default : Color.Primary)" Class="mr-3" />
                        <div class="flex-grow-1">
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body1" Style="@(notification.IsRead ? "" : "font-weight: bold")">@notification.Title</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@notification.CreatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
                            </div>
                            <MudText Typo="Typo.body2" Style="@(notification.IsRead ? "color: var(--mud-palette-text-secondary)" : "")">
                                @(notification.Message?.Length > 100 ? notification.Message.Substring(0, 100) + "..." : notification.Message)
                            </MudText>
                        </div>
                    </div>
                </MudListItem>
                <MudDivider />
            }
        </MudList>
    }
</MudContainer>

@code {
    private bool isLoading = true;
    private List<NotificationModel> notifications = new List<NotificationModel>();
    private string userId;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserIdAsync();
        if (!string.IsNullOrEmpty(userId))
        {
            await LoadNotificationsAsync();
        }
    }

    private async Task LoadUserIdAsync()
    {
        try
        {
            // Проверяем, авторизован ли пользователь с помощью AuthService
            var isAuthenticated = await AuthService.IsUserAuthenticated();
            if (!isAuthenticated)
            {
                errorMessage = "Пользователь не авторизован. Выполните вход в систему.";
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Пытаемся получить текущего пользователя
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user?.Identity?.IsAuthenticated != true)
            {
                errorMessage = "Пользователь не авторизован. Выполните вход в систему.";
                NavigationManager.NavigateTo("/login");
                return;
            }

            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                var userInfo = await AuthService.GetUserInfoAsync();
                if (userInfo != null)
                {
                    userId = userInfo.Id.ToString();
                }
                else
                {
                    throw new ApplicationException("Не удалось определить пользователя");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при получении данных пользователя: {ex.Message}";
        }
    }

    private async Task LoadNotificationsAsync()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            if (string.IsNullOrEmpty(userId) || !Guid.TryParse(userId, out Guid userGuid))
            {
                throw new ApplicationException("Некорректный ID пользователя");
            }

            var notificationsDto = await NotificationService.GetAllNotificationsForUserAsync(userGuid);
            notifications = notificationsDto.Select(dto => dto.ToModel()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Не удалось загрузить уведомления: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task TryReloadAsync()
    {
        await LoadUserIdAsync();
        if (!string.IsNullOrEmpty(userId))
        {
            await LoadNotificationsAsync();
        }
    }

    private async Task HandleNotificationClick(NotificationModel notification)
    {
        try
        {
            if (!notification.IsRead)
            {
                await NotificationService.MarkAsReadAsync(notification.Id);
                notification.IsRead = true;
            }

            if (notification.TaskId.HasValue)
            {
                NavigationManager.NavigateTo($"/tasks/{notification.TaskId}");
            }
            else
            {
                var parameters = new DialogParameters
                {
                    { "Title", notification.Title },
                    { "Message", notification.Message },
                    { "Date", notification.CreatedAt }
                };

                await DialogService.ShowAsync<NotificationDialog>("Уведомление", parameters);
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Ошибка", $"Не удалось обработать уведомление: {ex.Message}");
        }
    }

    private async Task MarkAllAsReadAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(userId) || !Guid.TryParse(userId, out Guid userGuid))
            {
                throw new ApplicationException("Некорректный ID пользователя");
            }

            await NotificationService.MarkAllAsReadForUserAsync(userGuid);
            foreach (var notification in notifications)
            {
                notification.IsRead = true;
            }
            Snackbar.Add("Все уведомления отмечены как прочитанные", Severity.Success);
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Ошибка", $"Не удалось отметить уведомления как прочитанные: {ex.Message}");
        }
    }
}
