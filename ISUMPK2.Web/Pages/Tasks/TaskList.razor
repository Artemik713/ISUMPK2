@page "/tasks"
@page "/tasks/my"
@page "/tasks/overdue"
@attribute [Authorize]
@using ISUMPK2.Application.DTOs
@using ISUMPK2.Application.Services
@using ISUMPK2.Web.Models
@using ISUMPK2.Web.Dialogs
@using ISUMPK2.Web.Extensions
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@inject ITaskService TaskService
@inject ISubTaskService SubTaskService
@inject IUserService UserService
@inject IDepartmentService DepartmentService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Задачи - ИСУ ПМК</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Elevation="0" Class="d-flex flex-column pa-6 rounded-lg">
        <!-- Верхняя панель с заголовком и кнопками -->
        <div class="d-flex justify-space-between align-center mb-6">
            <div>
                <MudText Typo="Typo.h4" Class="mb-1">@PageTitle</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    @(filteredTasks.Count) @GetTaskCountSuffix(filteredTasks.Count)
                </MudText>
            </div>

            <div class="d-flex gap-2">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="CreateTask"
                           Class="px-4">
                    Создать задачу
                </MudButton>

                <MudTooltip Text="Обновить">
                    <MudIconButton Color="Color.Default"
                                   Variant="Variant.Outlined"
                                   Icon="@Icons.Material.Filled.Refresh"
                                   OnClick="LoadTasksAsync" />
                </MudTooltip>

                <MudTooltip Text="@(isCardView ? "Табличный вид" : "Карточный вид")">
                    <MudIconButton Color="Color.Default"
                                   Variant="Variant.Outlined"
                                   Icon="@(isCardView ? Icons.Material.Filled.ViewList : Icons.Material.Filled.ViewModule)"
                                   OnClick="ToggleView" />
                </MudTooltip>
            </div>
        </div>

        <!-- Панель фильтров -->
        <MudPaper Elevation="0" Class="pa-4 mb-6 rounded-lg" Style="background-color: var(--mud-palette-background-grey)">
            <MudGrid>
                <MudItem xs="12" md="3">
                    <MudSelect T="int?"
                               Value="selectedStatusId"
                               ValueChanged="@((int? value) => OnStatusChanged(value))"
                               Label="Статус"
                               Variant="Variant.Outlined"
                               Class="rounded-lg"
                               FullWidth="true"
                               Clearable="true"
                               AdornmentIcon="@Icons.Material.Filled.FilterList"
                               AdornmentColor="Color.Primary">
                        @foreach (var status in statuses)
                        {
                            <MudSelectItem T="int?" Value="@((int?)status.Id)">
                                @status.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudSelect T="int?"
                               Label="Приоритет"
                               Value="selectedPriorityId"
                               ValueChanged="@((int? value) => FilterChanged("priority", value))"
                               Variant="Variant.Outlined"
                               FullWidth="true"
                               Clearable="true"
                               AdornmentIcon="@Icons.Material.Filled.PriorityHigh"
                               AdornmentColor="Color.Secondary">
                        @foreach (var priority in priorities)
                        {
                            <MudSelectItem T="int?" Value="@((int?)priority.Id)">
                                @priority.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudSelect T="Guid?"
                               Label="Исполнитель"
                               Value="selectedAssigneeId"
                               ValueChanged="@((Guid? value) => FilterChanged("assignee", value))"
                               Variant="Variant.Outlined"
                               FullWidth="true"
                               Clearable="true"
                               AdornmentIcon="@Icons.Material.Filled.Person"
                               AdornmentColor="Color.Default">
                        @foreach (var user in users)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)user.Id)">@user.FullName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudSelect T="Guid?"
                               Label="Отдел"
                               Value="selectedDepartmentId"
                               ValueChanged="@((Guid? value) => FilterChanged("department", value))"
                               Variant="Variant.Outlined"
                               FullWidth="true"
                               Clearable="true"
                               AdornmentIcon="@Icons.Material.Filled.Business"
                               AdornmentColor="Color.Default">
                        @foreach (var department in departments)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)department.Id)">@department.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <!-- Легенда статусов и приоритетов -->
            <MudGrid Class="mt-2">
                <MudItem xs="12" md="6">
                    <div class="d-flex flex-wrap gap-2 align-center">
                        <MudText Typo="Typo.caption" Class="mr-2">Статусы:</MudText>
                        @foreach (var status in statuses)
                        {
                            <div class="d-flex align-center mr-4">
                                <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(status.Id)" Class="mr-1"></MudChip>
                                <MudText Typo="Typo.caption">@status.Name</MudText>
                            </div>
                        }
                    </div>
                </MudItem>
                <MudItem xs="12" md="6">
                    <div class="d-flex flex-wrap gap-2 align-center">
                        <MudText Typo="Typo.caption" Class="mr-2">Приоритеты:</MudText>
                        @foreach (var priority in priorities)
                        {
                            <div class="d-flex align-center mr-4">
                                <MudChip T="string" Size="Size.Small" Color="@GetPriorityColor(priority.Id)" Class="mr-1"></MudChip>
                                <MudText Typo="Typo.caption">@priority.Name</MudText>
                            </div>
                        }
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>

        @if (isCardView)
        {
            <!-- Карточный вид задач с сортировкой -->
            <div class="d-flex justify-end mb-3">
                <MudSelect T="string"
                           Value="@currentSortField"
                           ValueChanged="@OnSortChanged"
                           Label="Сортировать по"
                           Variant="Variant.Outlined"
                           Dense="true"
                           Style="width: 200px;">
                    <MudSelectItem Value="@("CreatedAt")">Дате создания</MudSelectItem>
                    <MudSelectItem Value="@("DueDate")">Сроку выполнения</MudSelectItem>
                    <MudSelectItem Value="@("PriorityId")">Приоритету</MudSelectItem>
                    <MudSelectItem Value="@("StatusId")">Статусу</MudSelectItem>
                    <MudSelectItem Value="@("Title")">Названию</MudSelectItem>
                </MudSelect>
                <MudIconButton Icon="@(isDescending? Icons.Material.Filled.ArrowDownward : Icons.Material.Filled.ArrowUpward)"
                               OnClick="ToggleSortDirection"
                               Class="ml-2" />
            </div>

            @if (sortedFilteredTasks.Any())
            {
                <div class="task-grid">
                    @foreach (var task in sortedFilteredTasks)
                    {
                        <MudCard Elevation="2" Class="task-card">
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudAvatar Color="@GetPriorityColor(task.PriorityId)" Size="Size.Medium">
                                        @(task.PriorityId == 4 ? "!" : task.PriorityId.ToString())
                                    </MudAvatar>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">
                                        <MudLink Href="@($"/tasks/{task.Id}")" Underline="Underline.None">
                                            @task.Title
                                        </MudLink>
                                    </MudText>
                                    <MudText Typo="Typo.caption">Создана: @task.CreatedAt.ToString("dd.MM.yyyy")</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true" Direction="Direction.Left">
                                        <MudMenuItem OnClick="@(() => ViewTask(task.Id))">Просмотр</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => EditTask(task.Id))">Изменить</MudMenuItem>
                                        @if (task.StatusId == 1 || task.StatusId == 2 || task.StatusId == 3)
                                        {
                                            <MudMenuItem OnClick="@(() => UpdateTaskStatus(task.Id, 4))">
                                                Отправить на проверку
                                            </MudMenuItem>
                                        }
                                        @if (task.StatusId == 4)
                                        {
                                            <MudMenuItem OnClick="@(() => UpdateTaskStatus(task.Id, 5))">
                                                Подтвердить выполнение
                                            </MudMenuItem>
                                            <MudMenuItem OnClick="@(() => UpdateTaskStatus(task.Id, 3))">
                                                Вернуть на доработку
                                            </MudMenuItem>
                                        }
                                    </MudMenu>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent Class="py-2">
                                <div class="d-flex mb-2">
                                    <MudChip T="string" Color="@GetStatusColor(task.StatusId)" Size="Size.Small">
                                        @task.StatusName
                                    </MudChip>
                                    @if (task.Comments.Count > 0)
                                    {
                                        <MudChip T="string" Icon="@Icons.Material.Filled.Comment" Size="Size.Small" Class="ml-2">
                                            @task.Comments.Count
                                        </MudChip>
                                    }
                                </div>

                                <!-- Прогресс подзадач -->
                                @if (taskSubTasksProgress.ContainsKey(task.Id))
                                {
                                    var progress = taskSubTasksProgress[task.Id];
                                    <div class="mb-2">
                                        <div class="d-flex justify-space-between align-center mb-1">
                                            <MudText Typo="Typo.caption">Прогресс:</MudText>
                                            <MudText Typo="Typo.caption">@progress.CompletedCount/@progress.TotalCount подзадач</MudText>
                                        </div>
                                        <MudProgressLinear Color="Color.Primary" Value="@progress.Percentage" Size="Size.Small" />
                                    </div>
                                }

                                <MudText Typo="Typo.body2">
                                    <strong>Исполнитель:</strong> @(string.IsNullOrEmpty(task.AssigneeName) ? "Не назначен" : task.AssigneeName)
                                </MudText>
                                @if (task.DueDate.HasValue)
                                {
                                    <div class="d-flex align-center mt-1">
                                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" Class="mr-1" />
                                        <MudText Typo="Typo.body2" Color="@(task.IsOverdue? Color.Error: Color.Default)">
                                            @task.DueDate.Value.ToString("dd.MM.yyyy")
                                            @if (task.IsOverdue)
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Small" Class="ml-1" />
                                            }
                                        </MudText>
                                    </div>
                                }
                            </MudCardContent>
                        </MudCard>
                    }
                </div>
            }
            else
            {
                <MudPaper Elevation="0" Class="pa-16 d-flex flex-column align-center justify-center">
                    <MudIcon Icon="@Icons.Material.Filled.AssignmentLate" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                    <MudText Typo="Typo.h6" Align="Align.Center">Задачи не найдены</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary" Class="mt-1">
                        Попробуйте изменить параметры фильтрации
                    </MudText>
                </MudPaper>
            }
        }
        else
        {
            <!-- Табличный вид задач -->
            <MudTable Items="@filteredTasks"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      Loading="@isLoading"
                      LoadingProgressColor="Color.Primary"
                      Elevation="0"
                      T="TaskModel"
                      Dense="true"
                      Striped="false"
                      Class="rounded-lg"
                      ServerData="ServerReload"
                      @ref="table">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x => x.Title)" InitialDirection="SortDirection.None">Название</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x => x.StatusId)" InitialDirection="SortDirection.None">Статус</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x => x.PriorityId)" InitialDirection="SortDirection.Descending">Приоритет</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x => x.AssigneeName ?? string.Empty)" InitialDirection="SortDirection.None">Исполнитель</MudTableSortLabel></MudTh>
                    <MudTh>Прогресс</MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x => x.DueDate ?? DateTime.MaxValue)" InitialDirection="SortDirection.None">Срок</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x => x.CreatedAt)" InitialDirection="SortDirection.Descending">Создана</MudTableSortLabel></MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Название">
                        <div class="d-flex align-center">
                            <MudLink Href="@($"/tasks/{context.Id}")">@context.Title</MudLink>
                            @if (context.Comments.Count > 0)
                            {
                                <MudBadge Content="@context.Comments.Count" Color="Color.Info" Overlap="true" Class="ml-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Comment" Size="Size.Small" />
                                </MudBadge>
                            }
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Статус">
                        <MudChip T="string"
                                 Color="@GetStatusColor(context.StatusId)"
                                 Size="Size.Small"
                                 Label="true"
                                 Variant="Variant.Filled">
                            @context.StatusName
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Приоритет">
                        <MudChip T="string"
                                 Color="@GetPriorityColor(context.PriorityId)"
                                 Size="Size.Small"
                                 Label="true"
                                 Variant="Variant.Filled">
                            @context.PriorityName
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Исполнитель">
                        <div class="d-flex align-center">
                            <MudAvatar Size="Size.Small" Class="mr-2">
                                @(string.IsNullOrEmpty(context.AssigneeName) ? "?" : context.AssigneeName[0].ToString())
                            </MudAvatar>
                            <span>@(string.IsNullOrEmpty(context.AssigneeName) ? "Не назначен" : context.AssigneeName)</span>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Прогресс">
                        @if (taskSubTasksProgress.ContainsKey(context.Id))
                        {
                            var progress = taskSubTasksProgress[context.Id];
                            <SubTaskProgressComponent TotalCount="@progress.TotalCount"
                                                      CompletedCount="@progress.CompletedCount"
                                                      ShowPercentage="false" />
                        }
                        else
                        {
                            <SubTaskProgressComponent TotalCount="0" CompletedCount="0" />
                        }
                    </MudTd>
                    <MudTd DataLabel="Срок">
                        <div class="d-flex align-center">
                            @if (context.DueDate.HasValue)
                            {
                                <MudText>@context.DueDate.Value.ToString("dd.MM.yyyy")</MudText>
                                @if (context.IsOverdue)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Small" Class="ml-1" />
                                }
                            }
                            else
                            {
                                <MudText>-</MudText>
                            }
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Создана">@context.CreatedAt.ToString("dd.MM.yyyy")</MudTd>
                    <MudTd>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true" Direction="Direction.Left">
                            <MudMenuItem OnClick="@(() => ViewTask(context.Id))">Просмотр</MudMenuItem>
                            <MudMenuItem OnClick="@(() => EditTask(context.Id))">Изменить</MudMenuItem>
                            @if (context.StatusId == 1 || context.StatusId == 2 || context.StatusId == 3)
                            {
                                <MudMenuItem OnClick="@(() => UpdateTaskStatus(context.Id, 4))">Отправить на проверку</MudMenuItem>
                            }
                            @if (context.StatusId == 4)
                            {
                                <MudMenuItem OnClick="@(() => UpdateTaskStatus(context.Id, 5))">Подтвердить выполнение</MudMenuItem>
                                <MudMenuItem OnClick="@(() => UpdateTaskStatus(context.Id, 3))">Вернуть на доработку</MudMenuItem>
                            }
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <div class="d-flex flex-column align-center py-8">
                        <MudIcon Icon="@Icons.Material.Filled.AssignmentLate" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                        <MudText Typo="Typo.h6" Align="Align.Center">Задачи не найдены</MudText>
                        <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary" Class="mt-1">
                            Попробуйте изменить параметры фильтрации
                        </MudText>
                    </div>
                </NoRecordsContent>
                <LoadingContent>
                    <div class="d-flex justify-center my-4">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager HorizontalAlignment="HorizontalAlignment.Right" />
                </PagerContent>
            </MudTable>
        }
    </MudPaper>
</MudContainer>

<style>
    .task-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        grid-gap: 16px;
    }

    .task-card {
        transition: all 0.2s ease;
    }

        .task-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--mud-elevation-4);
        }
</style>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "status")]
    public int? StatusFilter { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "priority")]
    public int? PriorityFilter { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "assignee")]
    public Guid? AssigneeFilter { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "department")]
    public Guid? DepartmentFilter { get; set; }

    private string PageTitle =>
        NavigationManager.Uri.Contains("/tasks/my") ? "Мои задачи" :
        NavigationManager.Uri.Contains("/tasks/overdue") ? "Просроченные задачи" :
        "Задачи";

    private MudTable<TaskModel>? table;
    private bool isLoading = true;
    private bool isCardView = false;
    private List<TaskModel> tasks = new List<TaskModel>();
    private List<TaskModel> filteredTasks = new List<TaskModel>();
    private List<TaskModel> sortedFilteredTasks = new List<TaskModel>();
    private List<UserModel> users = new List<UserModel>();
    private List<DepartmentModel> departments = new List<DepartmentModel>();
    private Dictionary<Guid, SubTaskProgress> taskSubTasksProgress = new();

    private int? selectedStatusId;
    private int? selectedPriorityId;
    private Guid? selectedAssigneeId;
    private Guid? selectedDepartmentId;

    // Сортировка для карточного вида
    private string currentSortField = "CreatedAt";
    private bool isDescending = true;

    public class SubTaskProgress
    {
        public int TotalCount { get; set; }
        public int CompletedCount { get; set; }
        public int Percentage => TotalCount > 0 ? (int)((double)CompletedCount / TotalCount * 100) : 0;
    }

    private void ToggleView()
    {
        isCardView = !isCardView;
        if (isCardView)
        {
            ApplySortingForCardView();
        }
    }

    private void OnSortChanged(string sortField)
    {
        currentSortField = sortField;
        ApplySortingForCardView();
    }

    private void ToggleSortDirection()
    {
        isDescending = !isDescending;
        ApplySortingForCardView();
    }

    private void ApplySortingForCardView()
    {
        if (!isCardView) return;

        var query = filteredTasks.AsQueryable();

        query = currentSortField switch
        {
            "CreatedAt" => isDescending ? query.OrderByDescending(t => t.CreatedAt) : query.OrderBy(t => t.CreatedAt),
            "DueDate" => isDescending ? query.OrderByDescending(t => t.DueDate ?? DateTime.MaxValue) : query.OrderBy(t => t.DueDate ?? DateTime.MaxValue),
            "PriorityId" => isDescending ? query.OrderByDescending(t => t.PriorityId) : query.OrderBy(t => t.PriorityId),
            "StatusId" => isDescending ? query.OrderByDescending(t => t.StatusId) : query.OrderBy(t => t.StatusId),
            "Title" => isDescending ? query.OrderByDescending(t => t.Title) : query.OrderBy(t => t.Title),
            _ => query.OrderByDescending(t => t.CreatedAt)
        };

        sortedFilteredTasks = query.ToList();
    }

    private string GetTaskCountSuffix(int count)
    {
        if (count % 10 == 1 && count % 100 != 11)
            return "задача";
        if ((count % 10 >= 2 && count % 10 <= 4) &&
            !(count % 100 >= 12 && count % 100 <= 14))
            return "задачи";
        return "задач";
    }

    private Color GetStatusColor(int statusId)
    {
        return statusId switch
        {
            1 => Color.Default,  // Создана
            2 => Color.Info,     // В работе
            3 => Color.Warning,  // Требует уточнения
            4 => Color.Primary,  // На проверке
            5 => Color.Success,  // Выполнена
            6 => Color.Error,    // Отклонена
            _ => Color.Default
        };
    }

    private Color GetPriorityColor(int priorityId)
    {
        return priorityId switch
        {
            1 => Color.Default,     // Низкий
            2 => Color.Info,        // Средний
            3 => Color.Warning,     // Высокий
            4 => Color.Error,       // Критический
            _ => Color.Default
        };
    }

    private List<StatusModel> statuses = new List<StatusModel>
    {
        new StatusModel { Id = 1, Name = "Создана" },
        new StatusModel { Id = 2, Name = "В работе" },
        new StatusModel { Id = 3, Name = "Требует уточнения" },
        new StatusModel { Id = 4, Name = "На проверке" },
        new StatusModel { Id = 5, Name = "Выполнена" },
        new StatusModel { Id = 6, Name = "Отклонена" }
    };

    private List<PriorityModel> priorities = new List<PriorityModel>
    {
        new PriorityModel { Id = 1, Name = "Низкий" },
        new PriorityModel { Id = 2, Name = "Средний" },
        new PriorityModel { Id = 3, Name = "Высокий" },
        new PriorityModel { Id = 4, Name = "Критический" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadFiltersDataAsync();

        // Устанавливаем начальные значения фильтров из параметров
        selectedStatusId = StatusFilter;
        selectedPriorityId = PriorityFilter;
        selectedAssigneeId = AssigneeFilter;
        selectedDepartmentId = DepartmentFilter;

        // Если мы на странице "Мои задачи", фильтруем по текущему пользователю
        if (NavigationManager.Uri.Contains("/tasks/my"))
        {
            var currentUser = await UserService.GetCurrentUserAsync();
            selectedAssigneeId = currentUser.Id;
        }

        // Если мы на странице "Просроченные задачи", загружаем просроченные задачи
        if (NavigationManager.Uri.Contains("/tasks/overdue"))
        {
            var tasksDto = await TaskService.GetOverdueTasksAsync();
            tasks = tasksDto.Select(dto => dto.ToModel()).ToList();
        }
        else
        {
            await LoadTasksAsync();
        }
    }

    private async Task LoadFiltersDataAsync()
    {
        try
        {
            try
            {
                users = (await UserService.GetAllUsersAsync())
                    .Select(dto => dto.ToModel())
                    .ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при загрузке пользователей: {ex.Message}");
                var currentUser = await UserService.GetCurrentUserAsync();
                users = new List<UserModel> { currentUser.ToModel() };
            }

            try
            {
                departments = (await DepartmentService.GetAllDepartmentsAsync())
                    .Select(dto => dto.ToModel())
                    .ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при загрузке отделов: {ex.Message}");
                departments = new List<DepartmentModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке данных для фильтров: {ex.Message}");
            users = new List<UserModel>();
            departments = new List<DepartmentModel>();
        }
    }

    private async Task LoadTasksAsync()
    {
        isLoading = true;
        try
        {
            if (NavigationManager.Uri.Contains("/tasks/overdue"))
            {
                tasks = (await TaskService.GetOverdueTasksAsync())
                    .Select(dto => dto.ToModel())
                    .ToList();
            }
            else if (NavigationManager.Uri.Contains("/tasks/my"))
            {
                var currentUser = await UserService.GetCurrentUserAsync();
                tasks = (await TaskService.GetTasksByAssigneeAsync(currentUser.Id))
                    .Select(dto => dto.ToModel())
                    .ToList();
            }
            else
            {
                tasks = (await TaskService.GetAllTasksAsync())
                    .Select(dto => dto.ToModel())
                    .ToList();
            }

            // Загружаем прогресс подзадач для всех задач
            await LoadSubTasksProgressAsync();

            ApplyFilters();
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Ошибка", $"Не удалось загрузить задачи: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadSubTasksProgressAsync()
    {
        taskSubTasksProgress.Clear();

        foreach (var task in tasks)
        {
            try
            {
                var subTasks = await SubTaskService.GetByParentTaskIdAsync(task.Id);
                var subTasksList = subTasks.ToList();

                if (subTasksList.Any())
                {
                    var completedCount = subTasksList.Count(st => st.StatusId == 5);
                    taskSubTasksProgress[task.Id] = new SubTaskProgress
                    {
                        TotalCount = subTasksList.Count,
                        CompletedCount = completedCount
                    };
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при загрузке подзадач для задачи {task.Id}: {ex.Message}");
            }
        }
    }

    private void ApplyFilters()
    {
        filteredTasks = tasks;

        if (selectedStatusId.HasValue)
        {
            filteredTasks = filteredTasks.Where(t => t.StatusId == selectedStatusId.Value).ToList();
        }

        if (selectedPriorityId.HasValue)
        {
            filteredTasks = filteredTasks.Where(t => t.PriorityId == selectedPriorityId.Value).ToList();
        }

        if (selectedAssigneeId.HasValue)
        {
            filteredTasks = filteredTasks.Where(t => t.AssigneeId == selectedAssigneeId.Value).ToList();
        }

        if (selectedDepartmentId.HasValue)
        {
            filteredTasks = filteredTasks.Where(t => t.DepartmentId == selectedDepartmentId.Value).ToList();
        }

        // Применяем сортировку для карточного вида
        if (isCardView)
        {
            ApplySortingForCardView();
        }

        table?.ReloadServerData();
    }

    private void OnStatusChanged(int? value)
    {
        selectedStatusId = value;
        ApplyFilters();
    }

    private void FilterChanged(string filterType, object? value)
    {
        switch (filterType)
        {
            case "status":
                selectedStatusId = (int?)value;
                break;
            case "priority":
                selectedPriorityId = (int?)value;
                break;
            case "assignee":
                selectedAssigneeId = (Guid?)value;
                break;
            case "department":
                selectedDepartmentId = (Guid?)value;
                break;
        }

        ApplyFilters();
    }

    private async Task<TableData<TaskModel>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        if (cancellationToken.IsCancellationRequested)
            return new TableData<TaskModel>() { TotalItems = 0, Items = new List<TaskModel>() };

        var sortedTasks = filteredTasks;

        // Сортировка для таблицы
        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            var sortField = state.SortLabel;
            var sortedQuery = sortField switch
            {
                "Title" => state.SortDirection == SortDirection.Descending
                    ? sortedTasks.OrderByDescending(x => x.Title)
                    : sortedTasks.OrderBy(x => x.Title),
                "StatusId" => state.SortDirection == SortDirection.Descending
                    ? sortedTasks.OrderByDescending(x => x.StatusId)
                    : sortedTasks.OrderBy(x => x.StatusId),
                "PriorityId" => state.SortDirection == SortDirection.Descending
                    ? sortedTasks.OrderByDescending(x => x.PriorityId)
                    : sortedTasks.OrderBy(x => x.PriorityId),
                "AssigneeName" => state.SortDirection == SortDirection.Descending
                    ? sortedTasks.OrderByDescending(x => x.AssigneeName ?? string.Empty)
                    : sortedTasks.OrderBy(x => x.AssigneeName ?? string.Empty),
                "DueDate" => state.SortDirection == SortDirection.Descending
                    ? sortedTasks.OrderByDescending(x => x.DueDate ?? DateTime.MaxValue)
                    : sortedTasks.OrderBy(x => x.DueDate ?? DateTime.MaxValue),
                "CreatedAt" => state.SortDirection == SortDirection.Descending
                    ? sortedTasks.OrderByDescending(x => x.CreatedAt)
                    : sortedTasks.OrderBy(x => x.CreatedAt),
                _ => sortedTasks.OrderByDescending(x => x.CreatedAt)
            };

            sortedTasks = sortedQuery.ToList();
        }

        // Пагинация
        var pagedTasks = sortedTasks
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToList();

        return new TableData<TaskModel> { TotalItems = sortedTasks.Count, Items = pagedTasks };
    }

    private void CreateTask()
    {
        NavigationManager.NavigateTo("/tasks/add");
    }

    private void ViewTask(Guid id)
    {
        NavigationManager.NavigateTo($"/tasks/{id}");
    }

    private void EditTask(Guid id)
    {
        NavigationManager.NavigateTo($"/tasks/edit/{id}");
    }

    private async Task UpdateTaskStatus(Guid id, int statusId)
    {
        var parameters = new DialogParameters
        {
            { "TaskId", id },
            { "NewStatusId", statusId },
            { "Statuses", statuses }
        };

        var dialog = await DialogService.ShowAsync<UpdateTaskStatusDialog>("Изменение статуса задачи", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadTasksAsync();
        }
    }

    private class StatusModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    private class PriorityModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}