@page "/tasks/edit/{id:guid}"
@attribute [Authorize]
@using ISUMPK2.Application.DTOs
@using ISUMPK2.Application.Services
@using ISUMPK2.Web.Dialogs
@using ISUMPK2.Web.Models
@using ISUMPK2.Web.Services
@using ISUMPK2.Web.Extensions
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@inject ITaskService TaskService
@inject IUserService UserService
@inject IDepartmentService DepartmentService
@inject ISubTaskService SubTaskService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Редактирование задачи - ИСУ ПМК</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (task == null)
{
    <MudAlert Severity="Severity.Error">Задача не найдена</MudAlert>
    <MudButton OnClick="GoBackToList" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
        Вернуться к списку задач
    </MudButton>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
        <MudText Typo="Typo.h4" Class="mb-4">Редактирование задачи</MudText>

        <MudPaper Class="pa-4">
            <MudTextField @bind-Value="updateModel.Title" Label="Название задачи*" Required="true" RequiredError="Название задачи обязательно" Class="mb-3" />

            <MudTextField @bind-Value="updateModel.Description" Label="Описание" Lines="5" Class="mb-3" />

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudSelect T="int" @bind-Value="updateModel.PriorityId" Label="Приоритет*">
                        <MudSelectItem Value="1">Низкий</MudSelectItem>
                        <MudSelectItem Value="2">Средний</MudSelectItem>
                        <MudSelectItem Value="3">Высокий</MudSelectItem>
                        <MudSelectItem Value="4">Критический</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2" Class="mb-n2">Исполнитель</MudText>
                    <div class="d-flex align-center">
                        <MudTextField Value="@GetAssigneeName()" ReadOnly="true" Class="flex-grow-1" />
                        <MudButton OnClick="OpenSelectUserDialog" Variant="Variant.Text" Class="ml-2">
                            <MudIcon Icon="@Icons.Material.Filled.Search" />
                        </MudButton>
                    </div>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2" Class="mb-n2">Отдел</MudText>
                    <div class="d-flex align-center">
                        <MudTextField Value="@GetDepartmentName()" ReadOnly="true" Class="flex-grow-1" />
                        <MudButton OnClick="OpenSelectDepartmentDialog" Variant="Variant.Text" Class="ml-2">
                            <MudIcon Icon="@Icons.Material.Filled.Search" />
                        </MudButton>
                    </div>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="dueDateText" Label="Срок выполнения"
                                  Class="mb-3" Placeholder="дд.мм.гггг" />
                </MudItem>
            </MudGrid>

            <!-- Новая секция подзадач -->
            <MudDivider Class="my-4" />
            <div class="d-flex justify-space-between align-center mb-3">
                <MudText Typo="Typo.h6">Подзадачи</MudText>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                         OnClick="AddSubTask" StartIcon="@Icons.Material.Filled.Add"
                         Size="Size.Small">
                    Добавить подзадачу
                </MudButton>
            </div>

            @if (subTasks.Any())
            {
                @foreach (var subTask in subTasks)
                {
                    <MudPaper Elevation="1" Class="pa-3 mb-3 border-solid border-1">
                        <div class="d-flex justify-space-between align-center mb-2">
                            <MudText Typo="Typo.subtitle1">Подзадача</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                        OnClick="() => RemoveSubTask(subTask)" Size="Size.Small" />
                        </div>
                        
                        <MudTextField T="string" Label="Название" @bind-Value="subTask.Title"
                                    Required="true" Class="mb-3" />
                        
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudSelect T="Guid?" @bind-Value="subTask.AssigneeId"
                                         Label="Исполнитель" Clearable="true">
                                    @foreach (var user in users)
                                    {
                                        <MudSelectItem Value="@((Guid?)user.Id)">@user.FullName</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudDatePicker Label="Срок выполнения" @bind-Date="subTask.DueDate" />
                            </MudItem>
                            
                            <MudItem xs="12">
                                <MudTextField T="string" Label="Описание" @bind-Value="subTask.Description"
                                            Lines="2" />
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            }
            else
            {
                <MudText Color="Color.Secondary" Class="mb-3">
                    Нет добавленных подзадач
                </MudText>
            }
            <!-- Конец новой секции подзадач -->

            <div class="d-flex justify-space-between mt-4">
                <div>
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@DeleteTaskAsync" Class="mr-2">
                        Удалить
                    </MudButton>
                    @if (showForceDelete)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@PerformForceDelete">
                            Принудительно удалить
                        </MudButton>
                    }
                </div>
                <div>
                    <MudButton Variant="Variant.Outlined" OnClick="GoBackToTask" Class="mr-2">
                        Отмена
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveTaskAsync">
                        Сохранить
                    </MudButton>
                </div>
            </div>
        </MudPaper>
    </MudContainer>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private TaskModel? task;
    private TaskUpdateDto updateModel = new TaskUpdateDto();
    private bool isLoading = true;
    private string? dueDateText;
    private bool showForceDelete = false;
    private string lastErrorMessage = string.Empty;
    private List<UserModel> users = new List<UserModel>();
    private List<DepartmentModel> departments = new List<DepartmentModel>();
    private List<SubTaskModel> subTasks = new List<SubTaskModel>(); // Добавлен список подзадач

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            // Загрузка справочников
            await LoadReferenceData();

            // Загрузка задачи
            var taskDto = await TaskService.GetTaskByIdAsync(id);
            if (taskDto != null)
            {
                task = taskDto.ToModel();

                // Заполняем форму для редактирования
                updateModel = new TaskUpdateDto
                    {
                        Title = task.Title ?? string.Empty,
                        Description = task.Description ?? string.Empty,
                        StatusId = task.StatusId,
                        PriorityId = task.PriorityId,
                        AssigneeId = task.AssigneeId,
                        DepartmentId = task.DepartmentId,
                        ProductId = task.ProductId,
                        Quantity = task.Quantity
                    };

                // Форматируем дату
                if (task.DueDate.HasValue)
                {
                    dueDateText = task.DueDate.Value.ToString("dd.MM.yyyy");
                }
                
                // Загружаем подзадачи
                await LoadSubTasksAsync();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка загрузки задачи: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    // Новый метод для загрузки подзадач
    private async Task LoadSubTasksAsync()
    {
        try
        {
            var subTasksDto = await SubTaskService.GetByParentTaskIdAsync(id);
            subTasks = subTasksDto.Select(dto => new SubTaskModel
            {
                Id = dto.Id,
                Title = dto.Title,
                Description = dto.Description,
                AssigneeId = dto.AssigneeId,
                AssigneeName = dto.AssigneeName,
                DueDate = dto.DueDate,
                StatusId = dto.StatusId,
                IsNew = false // Это существующая подзадача
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке подзадач: {ex.Message}");
            Snackbar.Add("Не удалось загрузить подзадачи", Severity.Warning);
        }
    }

    private async Task LoadReferenceData()
    {
        try
        {
            // Загружаем пользователей
            var usersDto = await UserService.GetAllUsersAsync();
            users = usersDto.Select(u => u.ToModel()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка загрузки пользователей: {ex.Message}", Severity.Warning);
        }

        try
        {
            // Загружаем отделы
            var departmentsDto = await DepartmentService.GetAllDepartmentsAsync();
            departments = departmentsDto.Select(d => d.ToModel()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка загрузки отделов: {ex.Message}", Severity.Warning);
        }
    }

    // Новый метод для добавления подзадачи
    private void AddSubTask()
    {
        subTasks.Add(new SubTaskModel 
        {
            Title = string.Empty,
            Description = string.Empty,
            StatusId = 1, // По умолчанию "Создана"
            IsNew = true // Это новая подзадача
        });
    }

    // Новый метод для удаления подзадачи
    private void RemoveSubTask(SubTaskModel subTask)
    {
        subTasks.Remove(subTask);
        StateHasChanged();
    }

    // Получение имени исполнителя
    private string GetAssigneeName()
    {
        if (!updateModel.AssigneeId.HasValue)
            return "Не назначен";

        var user = users.FirstOrDefault(u => u.Id == updateModel.AssigneeId);
        return user?.FullName ?? "Не назначен";
    }

    // Получение названия отдела
    private string GetDepartmentName()
    {
        if (!updateModel.DepartmentId.HasValue)
            return "Не указан";

        var department = departments.FirstOrDefault(d => d.Id == updateModel.DepartmentId);
        return department?.Name ?? "Не указан";
    }

    // Открыть диалог выбора пользователя
    private async Task OpenSelectUserDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogParams = new DialogParameters();
        dialogParams.Add("Title", "Выберите исполнителя");
        dialogParams.Add("Items", users.Select(u => new SelectItemDialog.ItemData
            {
                Id = u.Id.ToString(),
                Name = u.FullName
            }).ToList());
        dialogParams.Add("AllowClear", true);

        var dialog = await DialogService.ShowAsync<SelectItemDialog>("Выбор исполнителя", dialogParams, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string selectedId && !string.IsNullOrEmpty(selectedId))
        {
            updateModel.AssigneeId = Guid.Parse(selectedId);
        }
        else if (!result.Canceled)
        {
            updateModel.AssigneeId = null;
        }
    }

    // Открыть диалог выбора отдела
    private async Task OpenSelectDepartmentDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogParams = new DialogParameters();
        dialogParams.Add("Title", "Выберите отдел");

        dialogParams.Add("Items", departments.Select(d => new SelectItemDialog.ItemData
            {
                Id = d.Id?.ToString() ?? string.Empty,
                Name = d.Name ?? string.Empty
            }).ToList());

        dialogParams.Add("AllowClear", true);

        var dialog = await DialogService.ShowAsync<SelectItemDialog>("Выбор отдела", dialogParams, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null && result.Data is string selectedId && !string.IsNullOrEmpty(selectedId))
        {
            updateModel.DepartmentId = Guid.Parse(selectedId);
        }
        else if (!result.Canceled)
        {
            updateModel.DepartmentId = null;
        }
    }

    private async Task SaveTaskAsync()
    {
        // Валидация обязательных полей
        if (string.IsNullOrWhiteSpace(updateModel.Title))
        {
            Snackbar.Add("Название задачи обязательно", Severity.Warning);
            return;
        }

        try
        {
            // Парсим дату, если она указана
            if (!string.IsNullOrWhiteSpace(dueDateText))
            {
                if (DateTime.TryParseExact(dueDateText, "dd.MM.yyyy", null, System.Globalization.DateTimeStyles.None, out var date))
                {
                    updateModel.DueDate = date;
                }
                else
                {
                    Snackbar.Add("Неверный формат даты. Используйте формат дд.мм.гггг", Severity.Warning);
                    return;
                }
            }
            else
            {
                updateModel.DueDate = null;
            }

            // Сохраняем изменения задачи
            await TaskService.UpdateTaskAsync(id, updateModel);
            
            // Обрабатываем подзадачи
            foreach (var subTask in subTasks)
            {
                // Для новых подзадач
                if (subTask.IsNew)
                {
                    var subTaskDto = new SubTaskCreateDto
                    {
                        ParentTaskId = id,
                        Title = subTask.Title,
                        Description = subTask.Description,
                        AssigneeId = subTask.AssigneeId,
                        DueDate = subTask.DueDate,
                        StatusId = 1 // По умолчанию "Создана"
                    };
                    await SubTaskService.CreateSubTaskAsync(subTaskDto);
                }
                else
                {
                    // Для существующих подзадач
                    var subTaskUpdateDto = new SubTaskUpdateDto
                    {
                        Title = subTask.Title,
                        Description = subTask.Description,
                        AssigneeId = subTask.AssigneeId,
                        DueDate = subTask.DueDate
                    };
                    await SubTaskService.UpdateSubTaskAsync(subTask.Id, subTaskUpdateDto);
                }
            }
            
            Snackbar.Add("Задача успешно обновлена", Severity.Success);
            NavigationManager.NavigateTo($"/tasks/{id}");
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.MethodNotAllowed)
        {
            Snackbar.Add("Ошибка: метод не разрешен. Возможно, проблема с API.", Severity.Error);
            Console.WriteLine($"HTTP метод не разрешен: {ex.Message}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при сохранении: {ex.Message}", Severity.Error);
            Console.WriteLine($"Ошибка при сохранении: {ex}");
        }
    }

    private async Task DeleteTaskAsync()
    {
        var result = await DialogService.ShowMessageBox(
            "Подтверждение",
            "Вы действительно хотите удалить эту задачу?",
            yesText: "Да",
            noText: "Нет");

        if (result == true)
        {
            try
            {
                await TaskService.DeleteTaskAsync(id);
                Snackbar.Add("Задача удалена", Severity.Success);
                NavigationManager.NavigateTo("/tasks");
            }
            catch (HttpRequestException ex)
            {
                string errorMessage = "Ошибка при удалении задачи";

                if (ex.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    errorMessage = "Невозможно удалить задачу, так как она имеет зависимости (подзадачи или транзакции)";
                    showForceDelete = true; // Активируем кнопку принудительного удаления
                }

                Snackbar.Add(errorMessage, Severity.Warning, config =>
                {
                    config.VisibleStateDuration = 6000;
                });
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ошибка при удалении: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task<string> GetErrorMessageFromException(HttpRequestException ex)
    {
        try
        {
            // Используем HttpClient для обращения к свойствам исключения
            if (ex.Data.Contains("ResponseContent"))
            {
                return ex.Data["ResponseContent"]?.ToString() ?? ex.Message;
            }

            // Если содержимое отсутствует, вернем сообщение исключения
            return ex.Message;
        }
        catch
        {
            return ex.Message;
        }
    }
    // Обновленный метод для принудительного удаления
    private async Task PerformForceDelete()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var result = await DialogService.ShowMessageBox(
            "Принудительное удаление",
            "Вы действительно хотите удалить задачу вместе со всеми связанными элементами? Это действие нельзя отменить.",
            yesText: "Да, удалить всё",
            cancelText: "Отмена",
            options: options);

        if (result != true) return;

        try
        {
            // Показываем индикатор загрузки
            isLoading = true;

            // Удаляем все подзадачи
            foreach (var subTask in subTasks.Where(t => !t.IsNew))
            {
                try
                {
                    await SubTaskService.DeleteSubTaskAsync(subTask.Id);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ошибка при удалении подзадачи {subTask.Id}: {ex.Message}");
                    // Продолжаем удаление остальных подзадач даже если возникла ошибка
                }
            }

            // Небольшая пауза чтобы дать серверу обработать удаление подзадач
            await Task.Delay(500);

            // Пытаемся удалить основную задачу
            await TaskService.DeleteTaskAsync(id);

            Snackbar.Add("Задача и связанные элементы удалены", Severity.Success);
            NavigationManager.NavigateTo("/tasks");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при удалении: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    private void GoBackToList()
    {
        NavigationManager.NavigateTo("/tasks");
    }

    private void GoBackToTask()
    {
        NavigationManager.NavigateTo($"/tasks/{id}");
    }
    
    // Новый класс для работы с подзадачами
    public class SubTaskModel
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public Guid? AssigneeId { get; set; }
        public string AssigneeName { get; set; }
        public DateTime? DueDate { get; set; }
        public int StatusId { get; set; }
        public bool IsNew { get; set; } // Флаг для отличия новых подзадач от существующих
    }
}