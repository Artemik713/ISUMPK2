@page "/tasks/{id:guid}"
@attribute [Authorize]
@using ISUMPK2.Application.DTOs
@using ISUMPK2.Application.Services
@using ISUMPK2.Web.Models
@using ISUMPK2.Web.Dialogs
@using ISUMPK2.Web.Services
@using ISUMPK2.Web.Extensions
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@inject IUserService UserService
@inject ITaskService TaskService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Детали задачи - ИСУ ПМК</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (task == null)
{
    <MudAlert Severity="Severity.Error">Задача не найдена</MudAlert>
    <MudButton OnClick="GoBackToList" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
        Вернуться к списку
    </MudButton>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h5">@task.Title</MudText>
                    <div>
                        <MudButton Variant="Variant.Text"
                                   StartIcon="@Icons.Material.Filled.ArrowBack"
                                   OnClick="GoBackToList"
                                   Class="mr-2">
                            Назад
                        </MudButton>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Edit"
                                   OnClick="EditTask">
                            Редактировать
                        </MudButton>
                    </div>
                </div>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-3">Информация о задаче</MudText>

                    <MudGrid>
                        <MudItem xs="4">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Статус:</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudChip T="string" Color="@((MudBlazor.Color)Enum.Parse(typeof(MudBlazor.Color), task.StatusBadgeColor, true))"
                                     Size="Size.Small">
                                @task.StatusName
                            </MudChip>
                        </MudItem>

                        <MudItem xs="4">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Приоритет:</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudChip T="string" Color="@((MudBlazor.Color)Enum.Parse(typeof(MudBlazor.Color), task.PriorityBadgeColor, true))"
                                     Size="Size.Small">
                                @task.PriorityName
                            </MudChip>
                        </MudItem>

                        <MudItem xs="4">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Создатель:</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudText>@task.CreatorName</MudText>
                        </MudItem>

                        <MudItem xs="4">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Исполнитель:</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            @if (task.AssigneeId.HasValue && !string.IsNullOrEmpty(task.AssigneeName) && task.AssigneeName != "Не назначен")
                            {
                                <MudText>@task.AssigneeName</MudText>
                            }
                            else
                            {
                                <MudText>Не назначен</MudText>
                            }
                        </MudItem>
                        <MudItem xs="4">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Отдел:</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudText>@(string.IsNullOrEmpty(task.DepartmentName) ? "Не указан" : task.DepartmentName)</MudText>
                        </MudItem>

                        <MudItem xs="4">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Срок выполнения:</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudText>
                                @(task.DueDate.HasValue ? task.DueDate.Value.ToString("dd.MM.yyyy") : "Не указан")
                                @if (task.IsOverdue)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Small" Class="ml-1" />
                                    <span class="mud-error-text">Просрочено</span>
                                }
                            </MudText>
                        </MudItem>

                        <MudItem xs="4">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Дата создания:</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudText>@task.CreatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudDivider Class="my-3" />

                    <MudText Typo="Typo.h6" Class="mb-2">Действия</MudText>
                    <div class="d-flex flex-wrap gap-2">
                        @if (task.StatusId == 1)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Info"
                                       OnClick="@(() => ShowUpdateStatusDialog(2))">
                                Взять в работу
                            </MudButton>
                        }
                        @if (task.StatusId == 2 || task.StatusId == 3)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Info"
                                       OnClick="@(() => ShowUpdateStatusDialog(4))">
                                Отправить на проверку
                            </MudButton>
                        }
                        @if (task.StatusId == 4)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Success"
                                       OnClick="@(() => ShowUpdateStatusDialog(5))">
                                Подтвердить выполнение
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Warning"
                                       OnClick="@(() => ShowUpdateStatusDialog(3))">
                                Вернуть на доработку
                            </MudButton>
                        }
                    </div>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Elevation="2" Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.h6" Class="mb-3">Описание</MudText>
                    <MudText>@(string.IsNullOrEmpty(task.Description) ? "Описание отсутствует" : task.Description)</MudText>

                    @if (task.ProductId.HasValue)
                    {
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.h6" Class="mb-2">Информация о продукте</MudText>
                        <MudGrid>
                            <MudItem xs="4">
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">Продукт:</MudText>
                            </MudItem>
                            <MudItem xs="8">
                                <MudText>@task.ProductName</MudText>
                            </MudItem>

                            @if (task.Quantity.HasValue)
                            {
                                <MudItem xs="4">
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary">Количество:</MudText>
                                </MudItem>
                                <MudItem xs="8">
                                    <MudText>@task.Quantity.Value</MudText>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-3">Комментарии</MudText>

                    @if (task.Comments != null && task.Comments.Count > 0)
                    {
                        <MudList T="TaskCommentModel" Clickable="false" Class="mb-4">
                            @foreach (var comment in task.Comments.OrderByDescending(c => c.CreatedAt))
                            {
                                <MudListItem T="TaskCommentModel" Value="comment">
                                    <div class="d-flex justify-space-between mb-1">
                                        <MudText Typo="Typo.subtitle2">@comment.UserName</MudText>
                                        <MudText Typo="Typo.caption">@comment.CreatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
                                    </div>
                                    <MudText>@comment.Comment</MudText>
                                </MudListItem>
                                <MudDivider />
                            }
                        </MudList>
                    }
                    else
                    {
                        <MudText Class="mb-4">Нет комментариев</MudText>
                    }

                    <MudTextField @bind-Value="newComment" Label="Новый комментарий" Lines="3" />
                    <div class="d-flex justify-end mt-3">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="AddComment"
                                   Disabled="string.IsNullOrWhiteSpace(newComment)">
                            Добавить комментарий
                        </MudButton>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private TaskModel? task;
    private bool isLoading = true;
    private string newComment = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTaskAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id != Guid.Empty)
        {
            await LoadTaskAsync();
        }
    }
    private async Task LoadAssigneeInfoAsync()
    {
        if (task?.AssigneeId.HasValue == true && string.IsNullOrEmpty(task.AssigneeName))
        {
            try
            {
                var assignee = await UserService.GetUserByIdAsync(task.AssigneeId.Value);
                if (assignee != null)
                {
                    task.AssigneeName = $"{assignee.FirstName} {assignee.LastName}";
                    Console.WriteLine($"Загружен исполнитель: {task.AssigneeName}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при загрузке данных исполнителя: {ex.Message}");
            }
        }
    }

    private async Task LoadTaskAsync()
    {
        isLoading = true;
        try
        {
            Console.WriteLine($"Загрузка задачи с ID: {id}");
            var taskDto = await TaskService.GetTaskByIdAsync(id);
            Console.WriteLine($"Получен DTO с данными: AssigneeId={taskDto?.AssigneeId}, AssigneeName={taskDto?.AssigneeName}");

            if (taskDto != null)
            {
                task = taskDto.ToModel();
                Console.WriteLine($"Преобразовано в модель: AssigneeId={task.AssigneeId}, AssigneeName={task.AssigneeName}");

                // Добавьте этот вызов
                await LoadAssigneeInfoAsync();
            }
            else
            {
                task = null;
                Snackbar.Add("Задача не найдена", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке задачи: {ex}");
            Snackbar.Add($"Ошибка загрузки задачи: {ex.Message}", Severity.Error);
            task = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newComment)) return;

        try
        {
            var commentDto = new TaskCommentCreateDto
                {
                    TaskId = id,
                    Comment = newComment
                };

            await TaskService.AddCommentAsync(id, commentDto);
            newComment = "";
            Snackbar.Add("Комментарий добавлен", Severity.Success);
            await LoadTaskAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при добавлении комментария: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowUpdateStatusDialog(int newStatusId)
    {
        if (task == null) return;

        try
        {
            var statusDto = new TaskStatusUpdateDto
                {
                // Предполагаем, что свойство называется StatusId вместо NewStatusId
                    StatusId = newStatusId,
                    Comment = $"Статус изменен на: {GetStatusName(newStatusId)}"
                };

            // Добавляем проверку на null
            await TaskService.UpdateTaskStatusAsync(id, task.CreatorId, statusDto);
            Snackbar.Add("Статус задачи обновлен", Severity.Success);
            await LoadTaskAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при обновлении статуса: {ex.Message}", Severity.Error);
        }
    }


    private string GetStatusName(int statusId)
    {
        return statusId switch
        {
            1 => "Создана",
            2 => "В работе",
            3 => "Требует уточнения",
            4 => "На проверке",
            5 => "Выполнена",
            6 => "Отклонена",
            _ => $"Статус {statusId}"
        };
    }

    private void EditTask()
    {
        NavigationManager.NavigateTo($"/tasks/edit/{id}");
    }

    private void GoBackToList()
    {
        NavigationManager.NavigateTo("/tasks");
    }
}
