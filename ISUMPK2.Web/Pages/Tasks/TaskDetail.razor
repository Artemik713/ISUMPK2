@page "/tasks/{id:guid}"
@attribute [Authorize]
@using ISUMPK2.Application.DTOs
@using ISUMPK2.Application.Services
@using ISUMPK2.Web.Models
@using ISUMPK2.Web.Dialogs
@using ISUMPK2.Web.Services
@using ISUMPK2.Web.Extensions
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using System.Security.Claims
@inject ILocalStorageService _localStorage
@inject ISubTaskService SubTaskService
@inject IUserService UserService
@inject IAuthService AuthService
@inject ITaskService TaskService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Детали задачи - ИСУ ПМК</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-center my-6">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (task == null)
{
    <MudAlert Severity="Severity.Error">Задача не найдена</MudAlert>
    <MudButton OnClick="GoBackToList" Variant="Variant.Text" Color="Color.Primary" Class="mt-4">
        Вернуться к списку
    </MudButton>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="px-0">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h5">@task.Title</MudText>
            <div>
                <MudIconButton Icon="@Icons.Material.Outlined.ArrowBack" OnClick="GoBackToList" />
                @if (canEditTask)
                {
                    <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" OnClick="EditTask" />
                }
            </div>
        </div>

        <MudGrid Spacing="2">
            <!-- Информация о задаче -->
            <MudItem xs="12" md="6">
                <MudPaper Elevation="0" Class="pa-4 border-solid border-1">
                    <MudText Typo="Typo.subtitle1">Информация о задаче</MudText>

                    <div class="d-flex flex-column gap-2 mt-3">
                        <div class="d-flex">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="width:120px">Статус:</MudText>
                            <MudChip T="string" Color="@((MudBlazor.Color)Enum.Parse(typeof(MudBlazor.Color), task.StatusBadgeColor, true))"
                                     Size="Size.Small">@task.StatusName</MudChip>
                        </div>

                        <div class="d-flex">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="width:120px">Приоритет:</MudText>
                            <MudChip T="string" Color="@((MudBlazor.Color)Enum.Parse(typeof(MudBlazor.Color), task.PriorityBadgeColor, true))"
                                     Size="Size.Small">@task.PriorityName</MudChip>
                        </div>

                        <div class="d-flex">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="width:120px">Создатель:</MudText>
                            <MudText Typo="Typo.body2">@task.CreatorName</MudText>
                        </div>

                        <div class="d-flex">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="width:120px">Исполнитель:</MudText>
                            <MudText Typo="Typo.body2">@(task.AssigneeName ?? "Не назначен")</MudText>
                        </div>

                        <div class="d-flex">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="width:120px">Отдел:</MudText>
                            <MudText Typo="Typo.body2">@(task.DepartmentName ?? "Не указан")</MudText>
                        </div>

                        <div class="d-flex">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="width:120px">Срок выполнения:</MudText>
                            <div class="d-flex align-center">
                                <MudText Typo="Typo.body2">
                                    @(task.DueDate.HasValue? task.DueDate.Value.ToString("dd.MM.yyyy") : "Не указан")
                                </MudText>
                                @if (task.IsOverdue)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Small" Class="ml-1" />
                                }
                            </div>
                        </div>

                        <div class="d-flex">
                            <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="width:120px">Дата создания:</MudText>
                            <MudText Typo="Typo.body2">@task.CreatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
                        </div>
                    </div>

                    @if (task.StatusId != 5) // Если задача не выполнена
                    {
                        <MudDivider Class="my-3" />
                        <div class="d-flex gap-2">
                            @if (task.StatusId == 1)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                           OnClick="@(() => ShowUpdateStatusDialog(2))">
                                    Взять в работу
                                </MudButton>
                            }
                            @if (task.StatusId == 2 || task.StatusId == 3)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                           OnClick="@(() => ShowUpdateStatusDialog(4))">
                                    На проверку
                                </MudButton>
                            }
                            @if (task.StatusId == 4)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small"
                                           OnClick="@(() => ShowUpdateStatusDialog(5))">
                                    Выполнено
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small"
                                           OnClick="@(() => ShowUpdateStatusDialog(3))">
                                    На доработку
                                </MudButton>
                            }
                        </div>
                    }
                </MudPaper>
            </MudItem>

            <!-- Описание задачи -->
            <MudItem xs="12" md="6">
                <MudPaper Elevation="0" Class="pa-4 border-solid border-1 h-100">
                    <MudText Typo="Typo.subtitle1">Описание</MudText>
                    <MudText Typo="Typo.body2" Class="mt-3">
                        @(string.IsNullOrEmpty(task.Description) ? "Описание отсутствует" : task.Description)
                    </MudText>

                    @if (task.ProductId.HasValue)
                    {
                        <MudDivider Class="my-3" />
                        <MudText Typo="Typo.subtitle1">Информация о продукте</MudText>
                        <div class="mt-2">
                            <div class="d-flex">
                                <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="width:120px">Продукт:</MudText>
                                <MudText Typo="Typo.body2">@task.ProductName</MudText>
                            </div>
                            @if (task.Quantity.HasValue)
                            {
                                <div class="d-flex mt-1">
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary" Style="width:120px">Количество:</MudText>
                                    <MudText Typo="Typo.body2">@task.Quantity.Value</MudText>
                                </div>
                            }
                        </div>
                    }
                </MudPaper>
            </MudItem>

            <!-- Подзадачи -->
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-4 border-solid border-1">
                    <MudText Typo="Typo.subtitle1">Подзадачи</MudText>

                    @if (subTasks == null || !subTasks.Any())
                    {
                        <MudText Typo="Typo.body2" Class="my-2">Нет подзадач</MudText>
                    }
                    else
                    {
                        <div class="mt-3">
                            <MudSimpleTable Dense="true" Style="overflow-x:auto">
                                <thead>
                                    <tr>
                                        <th>Название</th>
                                        <th>Статус</th>
                                        <th>Исполнитель</th>
                                        <th>Срок</th>
                                        <!-- Удалить этот столбец -->
                                        <!-- <th></th> -->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var subtask in subTasks)
                                    {
                                        <tr>
                                            <td>@subtask.Title</td>
                                            <td>
                                                <MudChip T="string" Color="@GetSubTaskStatusColor(subtask.StatusId)"
                                                         Size="Size.Small">
                                                    @GetStatusName(subtask.StatusId)
                                                </MudChip>
                                            </td>
                                            <td>@(string.IsNullOrEmpty(subtask.AssigneeName) ? "Не назначен" : subtask.AssigneeName)</td>
                                            <td>@(subtask.DueDate.HasValue? subtask.DueDate.Value.ToString("dd.MM.yyyy") : "-")</td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        </div>
                    }
                </MudPaper>
            </MudItem>

            <!-- Комментарии -->
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-4 border-solid border-1">
                    <MudText Typo="Typo.subtitle1">Комментарии</MudText>

                    <div class="mt-3">
                        @if (task.Comments != null && task.Comments.Count > 0)
                        {
                            <div class="mb-4" style="max-height: 350px; overflow-y: auto;">
                                @foreach (var comment in task.Comments.OrderByDescending(c => c.CreatedAt))
                                {
                                    <MudPaper Elevation="0" Class="pa-2 mb-2 comment-block border-solid border-1">
                                        <div class="d-flex justify-space-between align-center">
                                            <MudText Typo="Typo.subtitle2">@comment.UserName</MudText>
                                            <MudText Typo="Typo.caption">@comment.CreatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
                                        </div>
                                        <MudText Typo="Typo.body2" Class="mt-1">@comment.Comment</MudText>
                                    </MudPaper>
                                }
                            </div>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Class="mb-4">Нет комментариев</MudText>
                        }

                        <MudTextField T="string" @bind-Value="newComment"
                                      Placeholder="Добавить комментарий"
                                      Lines="2"
                                      Variant="Variant.Outlined"
                                      Class="mb-2" />
                        <div class="d-flex justify-end">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       OnClick="AddComment"
                                       Disabled="string.IsNullOrWhiteSpace(newComment)">
                                Добавить
                            </MudButton>
                        </div>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

<style>
    .comment-block {
        background-color: #fafafa;
    }
</style>

@code {
    [Parameter]
    public Guid id { get; set; }
    private bool canEditTask = false;
    private List<string> userRoles = new List<string>();
    private Guid currentUserId;
    private TaskModel? task;
    private bool isLoading = true;
    private string newComment = "";
    private List<SubTaskModel> subTasks = new List<SubTaskModel>();

    protected override async Task OnInitializedAsync()
    {
        // Получаем текущего пользователя и его роли
        await GetCurrentUserInfo();
        await LoadTaskAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id != Guid.Empty)
        {
            await LoadTaskAsync();
        }
    }

    private async Task GetCurrentUserInfo()
    {
        try
        {
            // Получаем ID пользователя из localStorage
            var userIdString = await _localStorage.GetItemAsync<string>("userId");
            if (!string.IsNullOrEmpty(userIdString) && Guid.TryParse(userIdString, out Guid userId))
            {
                currentUserId = userId;

                // Получаем имя текущего пользователя из localStorage
                var userName = await _localStorage.GetItemAsync<string>("userName") ?? "";
                Console.WriteLine($"Имя пользователя: {userName}");

                // Особая проверка для конкретных пользователей
                if (userName.Equals("artemik713", StringComparison.OrdinalIgnoreCase))
                {
                    userRoles = new List<string> { "MetalShopManager" };
                }
                else if (userName.Contains("admin", StringComparison.OrdinalIgnoreCase))
                {
                    userRoles = new List<string> { "Administrator" };
                }
                else if (userName.Contains("manager", StringComparison.OrdinalIgnoreCase) ||
                         userName.Contains("MetalShopManager", StringComparison.OrdinalIgnoreCase))
                {
                    userRoles = new List<string> { "MetalShopManager" };
                }
                else if (userName.Contains("worker", StringComparison.OrdinalIgnoreCase))
                {
                    userRoles = new List<string> { "Worker" };
                }
                else
                {
                    // По умолчанию - обычный пользователь
                    userRoles = new List<string> { "User" };
                }

                Console.WriteLine($"Назначены роли: {string.Join(", ", userRoles)}");
            }
            else
            {
                Console.WriteLine("Не удалось получить ID пользователя из localStorage");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при получении данных пользователя: {ex.Message}");
        }
    }
    private void CheckEditPermissions()
    {
        if (task == null)
        {
            canEditTask = false;
            return;
        }

        // Выводим текущие роли для отладки
        Console.WriteLine($"Текущие роли: {string.Join(", ", userRoles)}");

        // Проверяем конкретные роли
        bool isAdmin = userRoles.Any(r =>
            r == "Administrator" || r == "Admin");

        bool isManager = userRoles.Any(r =>
            r == "MetalShopManager" || r == "PaintShopManager" ||
            r.Contains("Manager"));

        bool isAdminOrManager = isAdmin || isManager;
        bool isCreator = task.CreatorId == currentUserId;
        bool isWorker = userRoles.Any(r => r == "Worker");

        // Разрешаем редактирование для администраторов и менеджеров
        canEditTask = isAdminOrManager && !isWorker;

        // Подробный лог для отладки
        Console.WriteLine($"Проверка прав: canEdit={canEditTask}, isAdmin={isAdmin}, " +
            $"isManager={isManager}, isCreator={isCreator}, isWorker={isWorker}");
    }

    private async Task LoadSubTasksAsync()
    {
        try
        {
            var subTasksDto = await SubTaskService.GetByParentTaskIdAsync(id);
            subTasks = subTasksDto.Select(dto => new SubTaskModel
            {
                Id = dto.Id,
                ParentTaskId = dto.ParentTaskId,
                Title = dto.Title,
                Description = dto.Description,
                StatusId = dto.StatusId,
                AssigneeId = dto.AssigneeId,
                AssigneeName = dto.AssigneeName,
                DueDate = dto.DueDate
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке подзадач: {ex.Message}");
            Snackbar.Add($"Не удалось загрузить подзадачи: {ex.Message}", Severity.Warning);
        }
    }

    private async Task LoadAssigneeInfoAsync()
    {
        if (task?.AssigneeId.HasValue == true && string.IsNullOrEmpty(task.AssigneeName))
        {
            try
            {
                var assignee = await UserService.GetUserByIdAsync(task.AssigneeId.Value);
                if (assignee != null)
                {
                    task.AssigneeName = $"{assignee.FirstName} {assignee.LastName}";
                    Console.WriteLine($"Загружен исполнитель: {task.AssigneeName}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при загрузке данных исполнителя: {ex.Message}");
            }
        }
    }

    private async Task LoadTaskAsync()
    {
        isLoading = true;
        await LoadSubTasksAsync();

        try
        {
            Console.WriteLine($"Загрузка задачи с ID: {id}");
            var taskDto = await TaskService.GetTaskByIdAsync(id);

            if (taskDto != null)
            {
                task = taskDto.ToModel();
                await LoadAssigneeInfoAsync();

                // Проверка прав на редактирование после загрузки задачи
                CheckEditPermissions();
            }
            else
            {
                task = null;
                Snackbar.Add("Задача не найдена", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке задачи: {ex}");
            Snackbar.Add($"Ошибка загрузки задачи: {ex.Message}", Severity.Error);
            task = null;
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newComment)) return;

        try
        {
            var commentDto = new TaskCommentCreateDto
                {
                    TaskId = id,
                    Comment = newComment
                };

            await TaskService.AddCommentAsync(id, commentDto);
            newComment = "";
            Snackbar.Add("Комментарий добавлен", Severity.Success);
            await LoadTaskAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при добавлении комментария: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowUpdateStatusDialog(int newStatusId)
    {
        if (task == null) return;

        try
        {
            var statusDto = new TaskStatusUpdateDto
                {
                // Предполагаем, что свойство называется StatusId вместо NewStatusId
                    StatusId = newStatusId,
                    Comment = $"Статус изменен на: {GetStatusName(newStatusId)}"
                };

            // Добавляем проверку на null
            await TaskService.UpdateTaskStatusAsync(id, task.CreatorId, statusDto);
            Snackbar.Add("Статус задачи обновлен", Severity.Success);
            await LoadTaskAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при обновлении статуса: {ex.Message}", Severity.Error);
        }
    }


    private string GetStatusName(int statusId)
    {
        return statusId switch
        {
            1 => "Создана",
            2 => "В работе",
            3 => "Требует уточнения",
            4 => "На проверке",
            5 => "Выполнена",
            6 => "Отклонена",
            _ => $"Статус {statusId}"
        };
    }
    private async Task AddSubTask()
    {
        var parameters = new DialogParameters
    {
        { "ParentTaskId", id },
        { "Title", "Новая подзадача" }
    };

        var dialog = await DialogService.ShowAsync<SubTaskDialog>("Добавление подзадачи", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSubTasksAsync();
            Snackbar.Add("Подзадача добавлена", Severity.Success);
        }
    }

    private async Task EditSubTask(Guid subTaskId)
    {
        var subTask = subTasks.FirstOrDefault(s => s.Id == subTaskId);
        if (subTask == null) return;

        var parameters = new DialogParameters
    {
        { "SubTaskId", subTaskId },
        { "ParentTaskId", id },
        { "SubTask", subTask }
    };

        var dialog = await DialogService.ShowAsync<SubTaskDialog>("Редактирование подзадачи", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSubTasksAsync();
            Snackbar.Add("Подзадача обновлена", Severity.Success);
        }
    }

    private async Task DeleteSubTask(Guid subTaskId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Удаление подзадачи",
            "Вы уверены, что хотите удалить эту подзадачу?",
            "Да", "Отмена");

        if (confirmed == true)
        {
            try
            {
                await SubTaskService.DeleteSubTaskAsync(subTaskId);
                await LoadSubTasksAsync();
                Snackbar.Add("Подзадача удалена", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ошибка при удалении: {ex.Message}", Severity.Error);
            }
        }
    }
    private Color GetSubTaskStatusColor(int statusId)
    {
        return statusId switch
        {
            1 => Color.Default,  // Создана
            2 => Color.Info,     // В работе
            3 => Color.Warning,  // Требует уточнения
            4 => Color.Primary,  // На проверке
            5 => Color.Success,  // Выполнена
            6 => Color.Error,    // Отклонена
            _ => Color.Default
        };
    }

    private void EditTask()
    {
        NavigationManager.NavigateTo($"/tasks/edit/{id}");
    }

    private void GoBackToList()
    {
        NavigationManager.NavigateTo("/tasks");
    }
}
