@page "/account/change-password"
@attribute [Authorize]
@using ISUMPK2.Application.Services
@using ISUMPK2.Web.Services
@using MudBlazor
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Смена пароля - ИСУ ПМК</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudPaper Elevation="3" Class="pa-6">
        <MudText Typo="Typo.h5" Class="mb-4">Смена пароля</MudText>

        <MudTextField T="string"
                      Label="Текущий пароль"
                      @bind-Value="currentPassword"
                      InputType="InputType.Password"
                      Variant="Variant.Outlined"
                      Class="mb-3" />

        <MudTextField T="string"
                      Label="Новый пароль"
                      @bind-Value="newPassword"
                      InputType="InputType.Password"
                      Variant="Variant.Outlined"
                      Class="mb-3" />

        <MudTextField T="string"
                      Label="Подтвердите пароль"
                      @bind-Value="confirmPassword"
                      InputType="InputType.Password"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   FullWidth="true"
                   OnClick="ChangePasswordAsync">
            Сменить пароль
        </MudButton>

        <div class="d-flex justify-center mt-4">
            <MudButton Variant="Variant.Text"
                       OnClick="@(() => NavigationManager.NavigateTo("/profile"))"
                       Class="mx-2">
                Вернуться в профиль
            </MudButton>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";

    private async Task ChangePasswordAsync()
    {
        // Валидация
        if (string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
        {
            Snackbar.Add("Все поля обязательны для заполнения", Severity.Warning);
            return;
        }

        if (newPassword != confirmPassword)
        {
            Snackbar.Add("Новый пароль и подтверждение не совпадают", Severity.Warning);
            return;
        }

        try
        {
            // В реальном приложении здесь должен быть вызов сервиса смены пароля
            // var result = await AuthService.ChangePasswordAsync(currentPassword, newPassword);

            // Временный код для демонстрации
            await Task.Delay(1000);
            Snackbar.Add("Пароль успешно изменен", Severity.Success);

            // Перенаправление на профиль
            NavigationManager.NavigateTo("/profile");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при смене пароля: {ex.Message}", Severity.Error);
        }
    }
}