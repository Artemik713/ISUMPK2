@page "/login"
@using ISUMPK2.Application.Services
@using ISUMPK2.Web.Models
@using ISUMPK2.Web.Services
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<PageTitle>Вход в систему - ИСУ ПМК</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16 login-form">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Align="Align.Center">Информационная система управления производством металлоконструкций</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Имя пользователя" @bind-Value="loginModel.UserName" Required="true" RequiredError="Имя пользователя обязательно" />
                <MudTextField T="string" Label="Пароль" @bind-Value="loginModel.Password" Required="true" RequiredError="Пароль обязателен" InputType="InputType.Password" />

                @if (!string.IsNullOrEmpty(error))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-3">@error</MudAlert>
                }
            </MudForm>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-center pb-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="HandleLogin" Disabled="@(!success || isLoading)">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Вход...</MudText>
                }
                else
                {
                    <MudText>Войти</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private MudForm form;
    private bool success;
    private string[] errors = { };
    private string error;
    private bool isLoading = false;
    private LoginModel loginModel = new LoginModel();

    [Parameter]
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Проверяем, авторизован ли пользователь
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        if (isAuthenticated)
        {
            NavigationManager.NavigateTo("/home");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        error = string.Empty;

        try
        {
            var result = await AuthService.Login(loginModel);
            if (result.Successful)
            {
                // Определяем, куда перенаправить пользователя
                var returnUrl = string.IsNullOrEmpty(ReturnUrl) ? "/home" : ReturnUrl;

                // Выполняем полную перезагрузку страницы для обновления состояния аутентификации
                NavigationManager.NavigateTo(returnUrl, true);
            }
            else
            {
                error = result.Error;
            }
        }
        catch (Exception ex)
        {
            error = "Произошла ошибка при входе: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}
