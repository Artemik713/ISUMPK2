@using ISUMPK2.Application.DTOs
@using ISUMPK2.Application.Services
@using MudBlazor
@inject IDepartmentService DepartmentService
@inject MudBlazor.ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="form">
            <MudTextField @bind-Value="model.Name" Label="Название отдела"
                          Required="true" RequiredError="Название обязательно" />

            <MudTextField @bind-Value="model.Description" Label="Описание"
                          Lines="3" Class="mt-3" />

            <MudSelect T="Guid?" @bind-Value="model.HeadId" Label="Руководитель" Class="mt-3" Clearable="true">
                <MudSelectItem T="Guid?" Value="@((Guid?)null)">Не назначен</MudSelectItem>
                @foreach (var user in Users)
                {
                    var fullName = $"{user.LastName} {user.FirstName} {user.MiddleName}".Trim();
                    if (string.IsNullOrWhiteSpace(fullName))
                    {
                        fullName = user.UserName ?? $"Пользователь {user.Id}";
                    }
                    <MudSelectItem T="Guid?" Value="@((Guid?)user.Id)">@fullName</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public DepartmentDto Department { get; set; } // ДОБАВЛЕН отсутствующий параметр
    [Parameter] public IEnumerable<UserDto> Users { get; set; } = new List<UserDto>();

    private MudForm form;
    private DepartmentUpdateDto model = new DepartmentUpdateDto(); // ИСПРАВЛЕН тип на DepartmentUpdateDto

    protected override void OnInitialized()
    {
        // ДОБАВЛЕНА инициализация данными из Department
        if (Department != null)
        {
            model.Name = Department.Name;
            model.Description = Department.Description;
            model.HeadId = Department.HeadId;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        form.Validate();
        if (form.IsValid)
        {
            try
            {
                // ИСПРАВЛЕН вызов метода на UpdateDepartmentAsync с ID департамента
                await DepartmentService.UpdateDepartmentAsync(Department.Id, model);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ошибка: {ex.Message}", Severity.Error);
            }
        }
    }
}