@using ISUMPK2.Application.Services
@using ISUMPK2.Web.Models
@using ISUMPK2.Web.Services
@using ISUMPK2.Web.Extensions
@using ISUMPK2.Application.DTOs
@using MudBlazor
@namespace ISUMPK2.Web.Dialogs
@inject IMaterialService MaterialService
@inject ISnackbar Snackbar
@inject ITaskService TaskService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px">
            <MudText Typo="Typo.h6" Class="mb-4">Добавление операции для материала</MudText>

            @if (material != null)
            {
                <div class="mb-4">
                    <MudText><strong>Материал:</strong> @material.Name</MudText>
                    <MudText><strong>Текущий запас:</strong> @material.CurrentStock @material.UnitOfMeasure</MudText>
                </div>
            }

            <MudSelect @bind-Value="transaction.TransactionType" Label="Тип операции" Required="true" Class="mb-4">
                <MudSelectItem Value="@("Приход")">Приход</MudSelectItem>
                <MudSelectItem Value="@("Расход")">Расход</MudSelectItem>
            </MudSelect>

            <MudNumericField @bind-Value="transaction.Quantity" Label="Количество" Required="true"
                             HelperText="Введите количество материала" Min="0"
                             Variant="Variant.Outlined" Adornment="Adornment.End"
                             AdornmentText="@(material?.UnitOfMeasure ?? "")" Class="mb-4" />

            <MudTextField @bind-Value="transaction.Notes" Label="Примечания"
                          HelperText="Введите примечания к операции" Lines="3"
                          Variant="Variant.Outlined" Class="mb-4" />

            @if (showTaskSelect)
            {
                <MudSelect T="string" @bind-Value="selectedTaskId" Label="Связанная задача" Class="mb-4">
                    <MudSelectItem Value="@("00000000-0000-0000-0000-000000000000")">Нет</MudSelectItem>
                    @foreach (var task in tasks)
                    {
                        <MudSelectItem Value="@(task.Id.ToString())">@task.Title</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitAsync" Disabled="@(!IsValid || isProcessing)">
            @if (isProcessing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Сохранение...</MudText>
            }
            else
            {
                <MudText>Сохранить</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Guid MaterialId { get; set; }
    [Parameter] public EventCallback OnTransactionAdded { get; set; }
    [Parameter] public bool RedirectToView { get; set; } = true;

    private MaterialModel? material;
    private List<TaskModel> tasks = new List<TaskModel>();
    private bool isProcessing = false;
    private bool showTaskSelect = false;
    private string selectedTaskId = "00000000-0000-0000-0000-000000000000";

    private MaterialTransactionCreateDto transaction = new MaterialTransactionCreateDto
    {
        TransactionType = "Приход", // Изменено с Receipt на Приход
        Quantity = 0
    };

    private bool IsValid => transaction.Quantity > 0 && !string.IsNullOrEmpty(transaction.TransactionType);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            transaction.MaterialId = MaterialId;

            // Загружаем данные о материале
            var materialDto = await MaterialService.GetMaterialByIdAsync(MaterialId);
            material = materialDto.ToModel();

            // Загружаем задачи, если доступно
            try
            {
                var allTasks = await TaskService.GetAllTasksAsync();
                if (allTasks != null)
                {
                    tasks = allTasks.Select(t => t.ToModel()).ToList();
                    showTaskSelect = tasks.Any();
                }
            }
            catch (Exception)
            {
                // Если возникла ошибка при загрузке задач, игнорируем
                showTaskSelect = false;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке данных: {ex.Message}", Severity.Error);
            MudDialog.Cancel();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task SubmitAsync()
    {
        if (!IsValid) return;

        isProcessing = true;

        try
        {
            // Проверяем достаточное количество при расходе
            if (transaction.TransactionType == "Расход" && material != null)
            {
                if (material.CurrentStock < transaction.Quantity)
                {
                    throw new InvalidOperationException($"Недостаточно материала на складе. Доступно: {material.CurrentStock} {material.UnitOfMeasure}");
                }
                // Преобразуем русское название в английское для API
                transaction.TransactionType = "Issue";
            }
            else if (transaction.TransactionType == "Приход")
            {
                // Преобразуем русское название в английское для API
                transaction.TransactionType = "Receipt";
            }

            // Проверка и установка значений по умолчанию
            if (string.IsNullOrEmpty(transaction.Notes))
            {
                transaction.Notes = "-"; // Устанавливаем дефолтное значение, если поле пустое
            }

            // Устанавливаем ID задачи из строкового представления
            if (!string.IsNullOrEmpty(selectedTaskId) &&
                selectedTaskId != "00000000-0000-0000-0000-000000000000" &&
                Guid.TryParse(selectedTaskId, out Guid taskId))
            {
                transaction.TaskId = taskId;
            }
            else
            {
                transaction.TaskId = null;
            }

            // Добавляем транзакцию через сервис
            await MaterialService.AddMaterialTransactionAsync(transaction);

            // Уведомляем об успешном добавлении
            Snackbar.Add("Операция успешно добавлена", Severity.Success);

            // Вызываем событие для обновления родительского компонента
            if (OnTransactionAdded.HasDelegate)
            {
                await OnTransactionAdded.InvokeAsync();
            }

            MudDialog.Close(DialogResult.Ok(new { MaterialId = MaterialId, RedirectToView = RedirectToView }));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при сохранении операции: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }
}